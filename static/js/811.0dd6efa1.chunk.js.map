{"version":3,"file":"static/js/811.0dd6efa1.chunk.js","mappings":"gQAEaA,GAAOC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,8EAOJC,GAAWD,EAAAA,EAAAA,IAAO,KAAPA,CAAH,siB,4BC+CrB,EA9Ca,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbE,EAAAA,EAAAA,IAAaR,GACVS,MAAK,SAAAC,GACJ,IAAMC,EAAgBD,EAAQE,KAAKC,KACjC,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,KAA5B,MAA4C,CAC1CC,GADF,EAAkCA,GAEhCD,KAAAA,EACAD,UAAAA,EACAD,aAAa,iCAAD,OAAmCA,GAJjD,IAOFV,EAAYO,EACb,IACAO,OAAM,WACLC,IAAAA,OAAAA,QAAwB,0BACzB,IACAC,SAAQ,kBAAMd,GAAa,EAAnB,GACZ,GAAE,CAACN,KAGF,0BACGK,GACC,SAACgB,EAAA,EAAD,IAEAlB,IACE,SAACN,EAAD,UACGM,EAASU,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,GAAlC,OACZ,UAAClB,EAAD,YACE,gBAAKuB,IAAKR,EAAcS,MAAM,QAAQC,IAAKR,KAC3C,kCAAUA,MACV,uCAAeD,OAHFE,EADH,OAYzB,C,6CCrCD,IAfe,WACb,OACE,SAAC,KAAD,CACEQ,OAAO,KACPF,MAAM,KACNG,OAAQ,EACRC,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,mMCXKC,EAAM,qCACNC,EAAU,mCAEHC,EAAe,mCAAG,WAAMjB,GAAN,kFACvBkB,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,IAFkB,SAINK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,YAAoBf,EAApB,YAA0BkB,IAJpB,uBAIrBI,EAJqB,EAIrBA,KAJqB,kBAMtBA,GANsB,2CAAH,sDASf/B,EAAY,mCAAG,WAAMS,GAAN,kFACpBkB,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,IAFe,SAIHK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,YAAoBf,EAApB,oBAAkCkB,IAJ/B,uBAIlBI,EAJkB,EAIlBA,KAJkB,kBAMnBA,GANmB,2CAAH,sDASZC,EAAe,mCAAG,WAAMvB,GAAN,kFACvBkB,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,IAFkB,SAINK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,YAAoBf,EAApB,oBAAkCkB,IAJ5B,uBAIrBI,EAJqB,EAIrBA,KAJqB,kBAMtBA,GANsB,2CAAH,sDASfE,EAAe,mCAAG,WAAMC,GAAN,kFACvBP,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,EACTU,eAAe,EACfD,MAAOA,IAJoB,SAMNJ,EAAAA,EAAAA,IAAA,UAtCN,4CAsCM,YAA2BH,IANrB,uBAMrBI,EANqB,EAMrBA,KANqB,kBAQtBA,GARsB,2CAAH,sDAWfK,EAAiB,mCAAG,+FACzBT,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,EACTU,eAAe,IAHc,SAKRL,EAAAA,EAAAA,IAAA,UA/CJ,kDA+CI,YAA6BH,IALrB,uBAKvBI,EALuB,EAKvBA,KALuB,kBAOxBA,GAPwB,2CAAH,oD","sources":["components/Cast/Cast.Styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/movieDataAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled('ul')`\n  display: flex;\n\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const ListItem = styled('li')`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  flex-wrap: wrap;\n  max-width: 154px;\n  border: 2px solid #8c46a3;\n  border-radius: 4px;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  color: #75367d;\n\n  &.active {\n    background-color: blue;\n    color: #ffffff;\n  }\n\n  :hover:not(.active),\n  :focus-visible:not(.active) {\n    color: #ca3fdd;\n    background-color: #ffd0f4;\n    border-color: #8c46a37e;\n    transition: transform 0.5s ease-out;\n    transform: scale(1.5);\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\n\nimport { ListItem, List } from './Cast.Styled';\n\nimport Loader from 'components/Loader/Loader';\n// import movieCastAPI from 'services/movieCastAPI';\nimport { movieCastAPI } from 'services/movieDataAPI';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castInfo, setCastInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    movieCastAPI(movieId)\n      .then(results => {\n        const processedCast = results.cast.map(\n          ({ profile_path, character, name, id }) => ({\n            id,\n            name,\n            character,\n            profile_path: `http://image.tmdb.org/t/p/w342${profile_path}`,\n          })\n        );\n        setCastInfo(processedCast);\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong...');\n      })\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <main>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        castInfo && (\n          <List>\n            {castInfo.map(({ profile_path, character, name, id }) => (\n              <ListItem key={id}>\n                <img src={profile_path} width=\"154px\" alt={name}></img>\n                <p>Name: {name}</p>\n                <p>Character: {character}</p>\n              </ListItem>\n            ))}\n          </List>\n        )\n      )}\n    </main>\n  );\n};\n\nexport default Cast;\n","import { Puff } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Puff\n      height=\"80\"\n      width=\"80\"\n      radius={1}\n      color=\"#4fa94d\"\n      ariaLabel=\"puff-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst SEARCH_URL = 'https://api.themoviedb.org/3/search/movie';\nconst TRENDING_URL = 'https://api.themoviedb.org/3/trending/movie/day';\nconst URL = 'https://api.themoviedb.org/3/movie';\nconst API_KEY = '87582cb7f63615fc9dcd406a264f6674';\n\nexport const movieDetailsAPI = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const { data } = await axios.get(`${URL}/${id}?${searchParams}`);\n\n  return data;\n};\n\nexport const movieCastAPI = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const { data } = await axios.get(`${URL}/${id}/credits?${searchParams}`);\n\n  return data;\n};\n\nexport const movieReviewsAPI = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const { data } = await axios.get(`${URL}/${id}/reviews?${searchParams}`);\n\n  return data;\n};\n\nexport const searchMoviesAPI = async query => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    include_adult: false,\n    query: query,\n  });\n  const { data } = await axios.get(`${SEARCH_URL}?${searchParams}`);\n\n  return data;\n};\n\nexport const trendingMoviesAPI = async () => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    include_adult: false,\n  });\n  const { data } = await axios.get(`${TRENDING_URL}?${searchParams}`);\n\n  return data;\n};\n"],"names":["List","styled","ListItem","movieId","useParams","useState","castInfo","setCastInfo","isLoading","setIsLoading","useEffect","movieCastAPI","then","results","processedCast","cast","map","profile_path","character","name","id","catch","Notiflix","finally","Loader","src","width","alt","height","radius","color","ariaLabel","wrapperStyle","wrapperClass","visible","URL","API_KEY","movieDetailsAPI","searchParams","URLSearchParams","api_key","axios","data","movieReviewsAPI","searchMoviesAPI","query","include_adult","trendingMoviesAPI"],"sourceRoot":""}