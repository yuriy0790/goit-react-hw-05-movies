{"version":3,"file":"static/js/87.99533fe5.chunk.js","mappings":"4JAiBA,IAfe,WACb,OACE,SAAC,KAAD,CACEA,OAAO,KACPC,MAAM,KACNC,OAAQ,EACRC,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,sKCZYC,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,6jB,SCDRE,GAAUF,EAAAA,EAAAA,IAAO,UAAPA,CAAH,4EAMPG,GAAWH,EAAAA,EAAAA,IAAO,MAAPA,CAAH,uJ,SCarB,EAjBkB,SAAC,GAAD,QAChBI,UAAaC,EADG,EACHA,YAAaC,EADV,EACUA,MAAOC,EADjB,EACiBA,aAAcC,EAD/B,EAC+BA,OAAQC,EADvC,EACuCA,SAAUC,EADjD,EACiDA,UADjD,OAGhB,UAACR,EAAD,YACE,gBAAKS,IAAKN,EAAab,MAAM,MAAMoB,IAAKN,KACxC,UAACH,EAAD,YACE,0BACGG,EADH,KACYC,EADZ,QAGA,uBAAIG,KACJ,sCACA,uBAAID,KACJ,oCACA,uBAAID,SAbQ,E,uCCCZK,EAAe,mCAAG,WAAMC,GAAN,kFAChBC,EAAe,IAAIC,gBAAgB,CACvCC,QAJY,qCAEQ,SAICC,EAAAA,EAAAA,IAAA,UAPb,qCAOa,YAAoBJ,EAApB,YAA0BC,IAJ3B,uBAIdI,EAJc,EAIdA,KAJc,kBAMfA,GANe,2CAAH,sDASrB,IC2DA,EA9DqB,WAAO,IAAD,YACjBC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOlB,EAAP,KAAkBmB,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAEMC,GAAWC,EAAAA,EAAAA,MAiCjB,OA/BAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACbZ,EAAgBO,GACbS,MACC,YAQO,IAPLxB,EAOI,EAPJA,YACAS,EAMI,EANJA,GACAR,EAKI,EALJA,MACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,SACAqB,EACI,EADJA,aAWAP,GAT2B,iBAAO,CAChCT,GAAAA,EACAR,MAAAA,EACAC,aAAc,IAAIwB,KAAKxB,GAAcyB,cACrCxB,OAAQA,EAAOyB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAC7C3B,SAAAA,EACAC,UAAU,eAAD,OAAiB2B,KAAKC,MAAqB,GAAfR,GAA5B,KACTzB,YAAY,kCAAD,OAAoCA,GAPtB,GAU5B,IAEFkC,OAAM,WACLC,IAAAA,OAAAA,QAAwB,0BACzB,IACAC,SAAQ,kBAAMhB,GAAa,EAAnB,GACZ,GAAE,CAACL,KAGF,6BACE,UAAC,KAAD,CAAMsB,GAAE,oBAAEhB,EAASiB,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAAlC,WACE,SAAC,MAAD,CAAmBC,KAAK,OAD1B,aAICrB,GACC,SAACsB,EAAA,EAAD,IAEA1C,IAAa,SAAC,EAAD,CAAWA,UAAWA,KAErC,oDACA,SAACL,EAAD,CAAU2C,GAAI,OAAQC,MAAO,CAAEC,KAAI,oBAAElB,EAASiB,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,KAA7D,mBAGA,SAAC7C,EAAD,CAAU2C,GAAI,UAAWC,MAAO,CAAEC,KAAI,oBAAElB,EAASiB,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,KAAhE,sBAGA,SAAC,KAAD,MAGL,C","sources":["components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.Styled.js","components/MovieInfo/MovieInfo.Styled.js","components/MovieInfo/MovieInfo.jsx","services/movieDetailsAPI.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { Puff } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Puff\n      height=\"80\"\n      width=\"80\"\n      radius={1}\n      color=\"#4fa94d\"\n      ariaLabel=\"puff-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const LinkItem = styled(NavLink)`\n  display: inline-block;\n  text-align: center;\n  box-sizing: border-box;\n  width: 100px;\n  padding: 5px;\n  margin: 5px;\n  border-radius: 4px;\n  font-size: 20px;\n  font-weight: 700;\n  text-decoration: none;\n  color: #000000;\n  background-color: transparent;\n  border: 1px solid #8c46a3;\n  &.active {\n    background-color: #b161f7;\n    border: 2px solid #8c46a3;\n    color: #ffffff;\n  }\n\n  :hover:not(.active),\n  :focus-visible:not(.active) {\n    color: #8c46a3;\n    border: 2px solid #8c46a3;\n    transform: scale(1.03);\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Section = styled('section')`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport const InfoWrap = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-width: 320px;\n  max-width: 60%;\n  gap: 20px;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Section, InfoWrap } from './MovieInfo.Styled';\n\nconst MovieInfo = ({\n  movieInfo: { poster_path, title, release_date, genres, overview, userScore },\n}) => (\n  <Section>\n    <img src={poster_path} width=\"320\" alt={title}></img>\n    <InfoWrap>\n      <h2>\n        {title} ({release_date})\n      </h2>\n      <p>{userScore}</p>\n      <h3>Overview</h3>\n      <p>{overview}</p>\n      <h3>Genres</h3>\n      <p>{genres}</p>\n    </InfoWrap>\n  </Section>\n);\nexport default MovieInfo;\n\nMovieInfo.propTypes = {\n  movieInfo: PropTypes.shape({\n    poster_path: PropTypes.string,\n    title: PropTypes.string,\n    release_date: PropTypes.number,\n    genres: PropTypes.string,\n    overview: PropTypes.string,\n    userScore: PropTypes.string,\n  }).isRequired,\n};\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/movie';\nconst API_KEY = '87582cb7f63615fc9dcd406a264f6674';\n\nconst movieDetailsAPI = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const { data } = await axios.get(`${URL}/${id}?${searchParams}`);\n\n  return data;\n};\n\nexport default movieDetailsAPI;\n","import Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { RiArrowGoBackFill } from 'react-icons/ri';\n\nimport { LinkItem } from './MovieDetails.Styled';\n\nimport Loader from 'components/Loader/Loader';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport movieDetailsAPI from 'services/movieDetailsAPI';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    setIsLoading(true);\n    movieDetailsAPI(movieId)\n      .then(\n        ({\n          poster_path,\n          id,\n          title,\n          release_date,\n          genres,\n          overview,\n          vote_average,\n        }) => {\n          const processedMovieInfo = () => ({\n            id,\n            title,\n            release_date: new Date(release_date).getFullYear(),\n            genres: genres.map(genre => genre.name).join(' '),\n            overview,\n            userScore: `User score: ${Math.round(vote_average * 10)}%`,\n            poster_path: `https://image.tmdb.org/t/p/w500${poster_path}`,\n          });\n          setMovieInfo(processedMovieInfo);\n        }\n      )\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong...');\n      })\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <main>\n      <Link to={location.state?.from ?? '/'}>\n        <RiArrowGoBackFill size=\"20\" />\n        GO BACK\n      </Link>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        movieInfo && <MovieInfo movieInfo={movieInfo} />\n      )}\n      <h2>Additional information</h2>\n      <LinkItem to={'cast'} state={{ from: location.state?.from ?? '/' }}>\n        Cast\n      </LinkItem>\n      <LinkItem to={'reviews'} state={{ from: location.state?.from ?? '/' }}>\n        Reviews\n      </LinkItem>\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["height","width","radius","color","ariaLabel","wrapperStyle","wrapperClass","visible","LinkItem","styled","NavLink","Section","InfoWrap","movieInfo","poster_path","title","release_date","genres","overview","userScore","src","alt","movieDetailsAPI","id","searchParams","URLSearchParams","api_key","axios","data","movieId","useParams","useState","setMovieInfo","isLoading","setIsLoading","location","useLocation","useEffect","then","vote_average","Date","getFullYear","map","genre","name","join","Math","round","catch","Notiflix","finally","to","state","from","size","Loader"],"sourceRoot":""}