{"version":3,"file":"static/js/819.e64e36ba.chunk.js","mappings":"6JAiBA,IAfe,WACb,OACE,SAAC,KAAD,CACEA,OAAO,KACPC,MAAM,KACNC,OAAQ,EACRC,MAAM,UACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,+ICbYC,GAAOC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,mFAMJC,GAAWD,EAAAA,EAAAA,IAAO,KAAPA,CAAH,6U,4BCuCrB,EArCgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbE,EAAAA,EAAAA,IAAgBR,GACbS,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPN,EAAeM,EAChB,IACAC,OAAM,WACLC,IAAAA,OAAAA,QAAwB,0BACzB,IACAC,SAAQ,kBAAMP,GAAa,EAAnB,GACZ,GAAE,CAACN,KAGF,0BACGK,GACC,SAACS,EAAA,EAAD,KACGX,GAAeA,EAAYY,QAAU,GACxC,SAAClB,EAAD,UACGM,EAAYa,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACf,UAACpB,EAAD,YACE,oCAAYkB,MACZ,uBAAIC,MAFSC,EADA,OAQnB,yEAIP,C,mMCzCKC,EAAM,qCACNC,EAAU,mCAEHC,EAAe,mCAAG,WAAMH,GAAN,kFACvBI,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,IAFkB,SAINK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,YAAoBD,EAApB,YAA0BI,IAJpB,uBAIrBI,EAJqB,EAIrBA,KAJqB,kBAMtBA,GANsB,2CAAH,sDASfC,EAAY,mCAAG,WAAMT,GAAN,kFACpBI,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,IAFe,SAIHK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,YAAoBD,EAApB,oBAAkCI,IAJ/B,uBAIlBI,EAJkB,EAIlBA,KAJkB,kBAMnBA,GANmB,2CAAH,sDASZnB,EAAe,mCAAG,WAAMW,GAAN,kFACvBI,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,IAFkB,SAINK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,YAAoBD,EAApB,oBAAkCI,IAJ5B,uBAIrBI,EAJqB,EAIrBA,KAJqB,kBAMtBA,GANsB,2CAAH,sDASfE,EAAe,mCAAG,WAAMC,GAAN,kFACvBP,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,EACTU,eAAe,EACfD,MAAOA,IAJoB,SAMNJ,EAAAA,EAAAA,IAAA,UAtCN,4CAsCM,YAA2BH,IANrB,uBAMrBI,EANqB,EAMrBA,KANqB,kBAQtBA,GARsB,2CAAH,sDAWfK,EAAiB,mCAAG,+FACzBT,EAAe,IAAIC,gBAAgB,CACvCC,QAASJ,EACTU,eAAe,IAHc,SAKRL,EAAAA,EAAAA,IAAA,UA/CJ,kDA+CI,YAA6BH,IALrB,uBAKvBI,EALuB,EAKvBA,KALuB,kBAOxBA,GAPwB,2CAAH,oD","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.Styled.js","components/Reviews/Reviews.jsx","services/movieDataAPI.js"],"sourcesContent":["import { Puff } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Puff\n      height=\"80\"\n      width=\"80\"\n      radius={1}\n      color=\"#4fa94d\"\n      ariaLabel=\"puff-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const List = styled('ul')`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ListItem = styled('li')`\n  display: flex;\n  flex-direction: column;\n  padding: 5px;\n  margin: 5px;\n  gap: 5px;\n  max-width: 90%;\n  min-width: 250px;\n  border: 2px solid #8c46a3;\n  border-radius: 4px;\n  text-decoration: none;\n  font-size: 16px;\n  color: #a126b2;\n  background-color: #ffd0f420;\n  border-color: #8c46a37e;\n`;\n","import { useParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\n\nimport { ListItem, List } from './Reviews.Styled';\n\nimport Loader from 'components/Loader/Loader';\n// import movieReviewsAPI from 'services/movieReviewsAPI';\nimport { movieReviewsAPI } from 'services/movieDataAPI';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewsInfo, setReviewsInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    movieReviewsAPI(movieId)\n      .then(({ results }) => {\n        setReviewsInfo(results);\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong...');\n      })\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <main>\n      {isLoading ? (\n        <Loader />\n      ) : (reviewsInfo && reviewsInfo.length) > 0 ? (\n        <List>\n          {reviewsInfo.map(({ author, content, id }) => (\n            <ListItem key={id}>\n              <p>Author: {author}</p>\n              <p>{content}</p>\n            </ListItem>\n          ))}\n        </List>\n      ) : (\n        <p>We don't have any reviews for this movie yet</p>\n      )}\n    </main>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst SEARCH_URL = 'https://api.themoviedb.org/3/search/movie';\nconst TRENDING_URL = 'https://api.themoviedb.org/3/trending/movie/day';\nconst URL = 'https://api.themoviedb.org/3/movie';\nconst API_KEY = '87582cb7f63615fc9dcd406a264f6674';\n\nexport const movieDetailsAPI = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const { data } = await axios.get(`${URL}/${id}?${searchParams}`);\n\n  return data;\n};\n\nexport const movieCastAPI = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const { data } = await axios.get(`${URL}/${id}/credits?${searchParams}`);\n\n  return data;\n};\n\nexport const movieReviewsAPI = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const { data } = await axios.get(`${URL}/${id}/reviews?${searchParams}`);\n\n  return data;\n};\n\nexport const searchMoviesAPI = async query => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    include_adult: false,\n    query: query,\n  });\n  const { data } = await axios.get(`${SEARCH_URL}?${searchParams}`);\n\n  return data;\n};\n\nexport const trendingMoviesAPI = async () => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    include_adult: false,\n  });\n  const { data } = await axios.get(`${TRENDING_URL}?${searchParams}`);\n\n  return data;\n};\n"],"names":["height","width","radius","color","ariaLabel","wrapperStyle","wrapperClass","visible","List","styled","ListItem","movieId","useParams","useState","reviewsInfo","setReviewsInfo","isLoading","setIsLoading","useEffect","movieReviewsAPI","then","results","catch","Notiflix","finally","Loader","length","map","author","content","id","URL","API_KEY","movieDetailsAPI","searchParams","URLSearchParams","api_key","axios","data","movieCastAPI","searchMoviesAPI","query","include_adult","trendingMoviesAPI"],"sourceRoot":""}